@page "/Company-Hierarchy/{RoaringCompanyId}"
@using RoaringView.Data
@using RoaringView.Model
@inject CompanyHierarchyService CompanyDataService
@inject ILogger<CompanyHierarchy> Logger
@inject IJSRuntime JSRuntime

<h3>Company Hierarchy</h3>

@if (!isLoading)
{
    <div id="d3TreeChart"></div>
}
else
{
    <p>Loading...</p>
}

@code {
    [Parameter]
    public string RoaringCompanyId { get; set; }

    private SearchResults companyRelatedData;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation($"Initializing CompanyHierarchyPage for Company ID: {RoaringCompanyId}");
        isLoading = true;

        try
        {
            companyRelatedData = await CompanyDataService.GetCompanySpecificDataAsync(RoaringCompanyId);
            if (companyRelatedData.CompanyStructures.Any())
            {
                var d3FormattedData = ConvertToD3Format(companyRelatedData.CompanyStructures, companyRelatedData.CompanyNameMap);
                Logger.LogInformation($"Converted Chart Data: {System.Text.Json.JsonSerializer.Serialize(d3FormattedData)}");
                await JSRuntime.InvokeVoidAsync("createD3TreeChart", d3FormattedData, "d3TreeChart");
            }
            else
            {
                Logger.LogWarning("No company structures found to display.");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, $"Error occurred while fetching data for Company ID: {RoaringCompanyId}");
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var testData = GetExpandedTestData();
            Logger.LogInformation($"Invoking JS with Test Chart Data: {System.Text.Json.JsonSerializer.Serialize(testData)}");
            await JSRuntime.InvokeVoidAsync("createD3TreeChart", testData, "d3TreeChart");
        }
    }



    private async Task LoadAndDisplayChartData()
    {
        if (companyRelatedData != null && companyRelatedData.CompanyStructures.Any())
        {
            var d3FormattedData = ConvertToD3Format(companyRelatedData.CompanyStructures, companyRelatedData.CompanyNameMap);
            Logger.LogInformation($"Converted Chart Data: {System.Text.Json.JsonSerializer.Serialize(d3FormattedData)}");
            await JSRuntime.InvokeVoidAsync("createD3TreeChart", d3FormattedData, "d3TreeChart");
        }
        else
        {
            Logger.LogWarning("No company structures found to display.");
        }
    }



 private object ConvertToD3Format(IEnumerable<CompanyStructure> structures, Dictionary<int, string> companyNameMap)
{
    var rootNode = new
    {
        id = -1,
        name = "Root",
        children = new List<object>()
    };

    var nodes = new Dictionary<int, object>
    {
        [-1] = rootNode
    };

    // First, add all companies as nodes
    foreach (var companyId in companyNameMap.Keys)
    {
        if (!nodes.ContainsKey(companyId))
        {
            nodes[companyId] = new
            {
                id = companyId,
                name = companyNameMap[companyId],
                children = new List<object>()
            };
        }
    }

    // Then, create the hierarchy based on the structures
    foreach (var structure in structures)
    {
        var childId = structure.CompanyId;
        var parentId = structure.MotherCompanyId ?? -1;

        if (!nodes.ContainsKey(parentId))
        {
            nodes[parentId] = new
            {
                id = parentId,
                name = parentId == -1 ? "Root" : companyNameMap.GetValueOrDefault(parentId, $"Company {parentId}"),
                children = new List<object>()
            };
        }

        (nodes[parentId] as dynamic).children.Add(nodes[childId]);
    }

    return nodes[-1];
}






    private object ConvertNodeToJsonCompatibleFormat(ChartNode node)
    {
        return new
        {
            name = node.Name,
            children = node.Children.Select(ConvertNodeToJsonCompatibleFormat).ToList()
        };
    }



    public class ChartNode
    {
        public string Name { get; set; }
        public List<ChartNode> Children { get; set; }
    }
    private object GetExpandedTestData()
    {
        return new ChartNode
            {
                Name = "Root",
                Children = new List<ChartNode>
        {
            new ChartNode { Name = "Company 1", Children = new List<ChartNode>
            {
                new ChartNode { Name = "Company 2", Children = new List<ChartNode>
                {
                    new ChartNode { Name = "Company 3", Children = new List<ChartNode>
                    {
                        new ChartNode { Name = "Company 12" },
                        new ChartNode { Name = "Company 13" },
                    }},
                    new ChartNode { Name = "Company 25" }
                }},
                new ChartNode { Name = "Company 4", Children = new List<ChartNode>
                {
                    new ChartNode { Name = "Company 23" }
                }},
                // ... more companies as children of Company 1
            }},
            new ChartNode { Name = "Company 47", Children = new List<ChartNode>
            {
                new ChartNode { Name = "Company 42", Children = new List<ChartNode>
                {
                    new ChartNode { Name = "Company 40" },
                    new ChartNode { Name = "Company 41" },
                }},
                // ... more companies as children of Company 47
            }},
            // ... more top-level companies besides Company 1 and Company 47
        }
            };
    }


}
